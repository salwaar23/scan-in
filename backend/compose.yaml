# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

version: '3'
services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_TIMEZONE: ${DB_TIMEZONE}
      ZAP_API_KEY: ${ZAP_API_KEY}
    ports:
      - "${PORT}:${PORT}"
    networks:
      - app-network
    depends_on:
      - db
      - zap
      - nikto
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  zap:
    image: zaproxy/zap-stable
    container_name: zaproxy
    ports:
      - "8080:8080"
    environment:
      - ZAP_API_KEY=${ZAP_API_KEY}
    command: >
      /bin/bash -c "zap.sh -daemon -port 8080 -host 0.0.0.0 
      -config 'api.addrs.addr.name=.*' 
      -config api.disablekey=true 
      -config 'api.addrs.addr.regex=true' 
      -config ascan.threadPerHost=10 
      -config ascan.hostPerScan=5"
    networks:
      - app-network
    cpus: 2
    mem_limit: 6144m
    restart: unless-stopped

  nikto:
    image: alpine/nikto
    container_name: nikto
    command: tail -f /dev/null
    networks:
      - app-network

  db:
    image: mysql
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin
    container_name: phpmyadmin
    depends_on:
      - db
    ports:
      - "8081:80"
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data:


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

