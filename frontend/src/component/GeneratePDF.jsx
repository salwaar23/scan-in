import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { Document, Page, Text, View, StyleSheet, PDFViewer } from "@react-pdf/renderer";
import axios from "axios";

const styles = StyleSheet.create({
  page: { padding: 20, fontSize: 12 },
  section: { marginBottom: 10 },
  header: { fontSize: 18, marginBottom: 15, textAlign: "center" },
  table: {
    display: "table",
    width: "auto",
    borderStyle: "solid",
    borderWidth: 1,
    borderRightWidth: 0,
    borderBottomWidth: 0,
  },
  tableRow: { flexDirection: "row" },
  tableColHeader: {
    width: "25%",
    borderStyle: "solid",
    borderWidth: 1,
    borderLeftWidth: 0,
    borderTopWidth: 0,
    backgroundColor: "#bdbdbd",
    padding: 5,
  },
  tableCol: {
    width: "25%",
    borderStyle: "solid",
    borderWidth: 1,
    borderLeftWidth: 0,
    borderTopWidth: 0,
    padding: 5,
  },
  tableCellHeader: { fontWeight: "bold" },
  footer: {
    marginTop: 20,
    fontSize: 10,
    textAlign: "center",
    color: "grey",
  },
});

const countRisks = (findings) => {
  const levels = ["Tinggi", "Sedang", "Rendah", "Informational"];
  const counts = levels.reduce((acc, level) => {
    acc[level] = findings.filter((f) => f.risk === level).length;
    return acc;
  }, {});
  return counts;
};

const ScanReportDocument = ({ scan, findings }) => {
  const riskCounts = countRisks(findings);
  const maxCount = Math.max(...Object.values(riskCounts), 1); // prevent /0

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <Text style={styles.header}>Laporan Scan Kerentanan</Text>

        <View style={styles.section}>
          <Text>
            <Text style={{ fontWeight: "bold" }}>ID Scan:</Text> {scan.id}
          </Text>
          <Text>
            <Text style={{ fontWeight: "bold" }}>URL:</Text> {scan.url}
          </Text>
          <Text>
            <Text style={{ fontWeight: "bold" }}>Tools:</Text>{" "}
            {scan.tools.toUpperCase()}
          </Text>
          <Text>
            <Text style={{ fontWeight: "bold" }}>Tanggal Scan:</Text>{" "}
            {new Date(scan.created_at).toLocaleString()}
          </Text>
          <Text>
            <Text style={{ fontWeight: "bold" }}>Status:</Text> {scan.status}
          </Text>
        </View>

        <Text style={{ marginBottom: 5, fontWeight: "bold" }}>
          Jumlah Kerentanan berdasarkan Tingkat Risiko:
        </Text>
        <View style={{ marginBottom: 20 }}>
          {Object.entries(riskCounts).map(([level, count], idx) => (
            <View
              key={idx}
              style={{ flexDirection: "row", alignItems: "center", marginBottom: 4 }}
            >
              <Text style={{ width: 80 }}>{level}</Text>
              <View
                style={{
                  height: 10,
                  backgroundColor: "#4a90e2",
                  width: `${(count / maxCount) * 200}px`,
                  marginRight: 5,
                }}
              />
              <Text>{count}</Text>
            </View>
          ))}
        </View>

        <Text style={{ marginBottom: 10, fontWeight: "bold" }}>
          Daftar Temuan Kerentanan:
        </Text>

        <View style={styles.table}>
          <View style={styles.tableRow}>
            <Text style={[styles.tableColHeader, styles.tableCellHeader]}>
              Alert
            </Text>
            <Text style={[styles.tableColHeader, styles.tableCellHeader]}>
              Risk
            </Text>
            <Text style={[styles.tableColHeader, styles.tableCellHeader]}>
              Deskripsi
            </Text>
            <Text style={[styles.tableColHeader, styles.tableCellHeader]}>
              Solusi
            </Text>
          </View>

          {findings.length === 0 ? (
            <View style={styles.tableRow}>
              <Text style={styles.tableCol}>Tidak ada temuan</Text>
            </View>
          ) : (
            findings.map((f, idx) => (
              <View style={styles.tableRow} key={idx}>
                <Text style={styles.tableCol}>{f.alert}</Text>
                <Text style={styles.tableCol}>{f.risk}</Text>
                <Text style={styles.tableCol}>{f.description}</Text>
                <Text style={styles.tableCol}>{f.solution}</Text>
              </View>
            ))
          )}
        </View>

        <Text style={styles.footer}>Generated by Scan.In</Text>
      </Page>
    </Document>
  );
};

export default function GeneratePdfPage() {
  const { id } = useParams();
  const [scanData, setScanData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function fetchScanDetails() {
      try {
        const res = await axios.get(`http://localhost:5000/scans/${id}`);
        setScanData(res.data);
      } catch (error) {
        alert("Gagal memuat detail scan");
      }
      setLoading(false);
    }
    fetchScanDetails();
  }, [id]);

  if (loading) return <p>Loading...</p>;
  if (!scanData) return <p>Data tidak ditemukan</p>;

  return (
    <div style={{ height: "100vh" }}>
      <PDFViewer width="100%" height="100%">
        <ScanReportDocument
          scan={scanData.scan}
          findings={scanData.findings}
        />
      </PDFViewer>
    </div>
  );
}
